# -*- coding: utf-8 -*-
"""HousePrice_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MKBEpMKb7M-ygqFcYWFeR7XpouEyrvL3

# HOUSE PRICE
"""

# import file ke google colab
from google.colab import files
files.upload()

import pandas as pd
import numpy as np

# baca data train dan test
test = pd.read_csv("/content/test.csv")
train = pd.read_csv("/content/train.csv")

"""# DATA UNDERSTANDING

### DATA UNDERSTANDING TRAIN

"""

# Tampilkan tabel train
train.head()

# ukuran train
train.shape

# informasi train
train.info()

# fiture yg memiliki missing value
train.isnull().sum()[train.isnull().sum()>0]

# deskripsi ttg train
train.describe()

# banyak fiture yg bertype data numerik
train_numerik = [var_x for var_x in train.columns
                    if train[var_x].dtype != "O"]
print("jumlah feature non-karakter yaitu    :", len(train_numerik))

# banyaknya fiture yg bertipe data katagorik
train_catagoric = [var_x for var_x in train.columns
                  if train[var_x].dtype == "O"]
print("jumlah feature karakter(objek) yaitu :", len(train_catagoric))

# korelasi antar variabel terikan: SalePrice dengan variabel bebasnya
corr = train.corr().abs().unstack().sort_values(kind="quicksort", ascending=False).reset_index()
corr.rename(columns={"level_0": "Feature 1", "level_1": "Feature 2", 0: 'Correlation Coefficient'}, inplace=True)
corr[corr['Feature 1'] == 'SalePrice']

"""### DATA UNDERSTANDING TEST"""

# menampilkan tabel test
test.head()

# info tentang test
test.info()

# ukuran test
test.shape

# deskripsi ttg test
test.describe()

# featur yg memiliki missing value
test.isnull().sum()[test.isnull().sum()>0]

# banyak fiture yang memiliki type data numerik
test_numerik = [var_x for var_x in test.columns
                    if test[var_x].dtype != "O"]
print("jumlah feature numerik yaitu    :", len(test_numerik))

# banyak fiture yang memiliki type data numerik
test_catagorik = [var_x for var_x in test.columns
                 if test[var_x].dtype == "O"]
print("jumlah feature katagorik yaitu  :", len(test_catagorik))

"""# DATA PREPARATION

### DATA PREPARATION TRAIN

PASTIKAN DATA MEMENUHI ASUMSI BERIKUT:
1.   LINIERITAS
2.   BERDISTRIBUSI NORMAL
3.   HETEROSKEDASTISITAS TIDAK TERJADI
4.   OUTLIER ~ IDN
5.   TIDAK TERJADI AUTOKORELASI

PENENTUAN VARIABEL:
1.   VARIABEL TERIKAT/TARGET : SalePrice
2.   VARIABEL BEBAS/FITURE   : SELAIN SalePrice dan Id
"""

# Commented out IPython magic to ensure Python compatibility.
# import modul yg dibutuhkan
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

sns.set_style("darkgrid")
import warnings
warnings.filterwarnings('ignore')
from scipy import stats
from scipy.stats import norm

# lihat bentuk distribusi dari SalePrice, dengan melihat barplotnya
sns.displot(train["SalePrice"])

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(train["SalePrice"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(train["SalePrice"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('SalesPrice Distribution')
plt.show()

# melihat sebaran data SalePrice dengan melihat scatter plotnya
stats.probplot(train['SalePrice'], plot=plt)
plt.ylabel('Frequency')
plt.xlabel('SalesPrice Distribution')
image = plt.figure()
plt.show()

"""#### catatan : 
1. karena distribusi dari SalePrice tidak sepenuhnya berbentuk linier, maka SalePrice harus dilinierkan agar model regresi linier dapat diterapkan
2. karena bentuk kurva distribusi SalePrice lebih condong ke kiri (substansial positif), maka SalePrice harus ditransformasikan dan karena didalam data SalePrice terdapat nilai nol, maka SalePrice akan ditransformasikan ke bentuk log(1+x).
"""

# transormasi ke log(1+x)
import numpy as np
train["SalePrice"] = np.log1p(train["SalePrice"])
train["SalePrice"]

"""#### Cek kembali sebaran dan kurva SalePrice
untuk melihat apakah data SalePrice berdistribusi normal dan berbentuk linier
"""

# cek kembali linieritasnya
stats.probplot(train['SalePrice'], plot=plt)
plt.ylabel('Frequency')
plt.xlabel('SalesPrice Distribution')
image = plt.figure()
plt.show()

# cek kembali kurva distribusinya
(mu, sigma) = norm.fit(train["SalePrice"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(train["SalePrice"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('SalesPrice Distribution')
plt.show()

"""asumsi linieritas dan normalitas SalePrice telah terpenuhi, bentuk dari sebaran datanya telah mendekati garis lurus(linier) dan kurna distribusi datanya telah mendekati kurva distribusi normal yang baik.

CEK OUTLIER DATA
mengecek outlier data dengan melihat boxplot dan identifikasi menggunakan standar deviasinya untuk melihat data mana saja yg merupakan outlier dengan menggunakan 97,5% data yang berada dalam tiga standar deviasi
"""

#  boxplot untuk mendeteksi outlier dengan menggunakan whiskers pada 1.5

plt.boxplot(train["SalePrice"], notch=False, sym='.', vert=True, whis=1.5,
        positions=None, widths=None, patch_artist=False,
        bootstrap=None, usermedians=None, conf_intervals=None)

# fungsi untuk mengidentifikasi outlier
import statistics
train_saleprice = train["SalePrice"]

def find_anomalies(train_saleprice):
    anomalies=[]
    
    std_train_saleprice = statistics.stdev(train["SalePrice"])
    mean_train_saleprice = statistics.mean(train["SalePrice"])
    anomalies_cut_of = std_train_saleprice*3
    
    lower_limit = mean_train_saleprice - anomalies_cut_of
    upper_limit = mean_train_saleprice + anomalies_cut_of
    
    print(lower_limit)
    print(upper_limit)
    print("")
    
    for outlier in train_saleprice:
        if outlier > upper_limit or outlier < lower_limit:
            anomalies.append(outlier)
    return anomalies

find_anomalies(train_saleprice)

"""Dari hasil perhitungan dan boxplot dapat dilihat bahwa terdapat outlier, sehingga outlier harus dihandling agar model yang dihasilkan baik.

#### Catatan :
cara menghandling outlier yaitu:


1.   Hapus/remove outlier, jika outlier merupakan data error
2.   Abaikan outlier, jika bukan data error dan tidak terlalu menggangu
3.   Scalling (Normalization), dengan mengubah standar deviasinya menjadi satu (Std = 1)
4.   Centering (Standarization), dengan mengubah mean menjadi nol (mean=0)

"""

# hitung batas atas dan bawah data
import statistics
std_train_saleprice = statistics.stdev(train["SalePrice"])
mean_train_saleprice = statistics.mean(train["SalePrice"])
anomalies_cut_of = std_train_saleprice*3
    
lower_limit = mean_train_saleprice - anomalies_cut_of
upper_limit = mean_train_saleprice + anomalies_cut_of

# hapus data outlier
train = train.drop(train[(train['SalePrice']<lower_limit)&(train['SalePrice']>upper_limit)].index)

# ukuran train setelah diremove
train.shape

"""# FEATURE ANGINEERING
1. Buat data baru yg berisi Id dari tabel train dan test, dan hapus kolom Id 
2. dalam tabel train dan test
3. buat data baru yg berisi SalePrice, dan hapus kolom SalePrice dalam tabel train
4. gabungkan tabel train dan test gabungkan tabel train dan test kedalam satu dataframe yang sama
"""

ntrain = train.shape[0]
ntest = test.shape[0]
train_id = train["Id"]
test_id = test["Id"]
train_saleprice = train["SalePrice"]

y_train = train.SalePrice.values
all_data = pd.concat((train, test)).reset_index(drop=True)
all_data.drop(['SalePrice'], axis=1, inplace=True)
all_data

print("ukuran train       :", format(train.shape))
print("ukuran test        :", format(test.shape))
print("ukuran total data  :", format(all_data.shape))

"""# Handling missing value

isi missing value yg ada dalam setiap kolom tabel gabungan
"""

all_data.head()

# menampilkan feature yang memiliki missing value
all_data.isnull().sum()[all_data.isnull().sum()>0]

# jumlah feature yg memiliki missing value
print("total feature yg memiliki missing value : ", len(all_data.isnull().sum()[all_data.isnull().sum()>0]))

# KATEGORIKAL
sns.countplot(all_data["MSZoning"])
all_data["MSZoning"] = all_data["MSZoning"].fillna(all_data["MSZoning"].mode()[0])

# NUMERIKAL
sns.countplot(all_data["LotFrontage"])
all_data["LotFrontage"] = all_data["LotFrontage"].fillna(all_data["LotFrontage"].mean())

# KATAGORIKAL
sns.countplot(all_data["Exterior1st"])
all_data["Exterior1st"] = all_data["Exterior1st"].fillna(all_data["Exterior1st"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["Utilities"])
all_data["Utilities"] = all_data["Utilities"].fillna(all_data["Utilities"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["Exterior2nd"])
all_data["Exterior2nd"] = all_data["Exterior2nd"].fillna(all_data["Exterior2nd"].mode()[0])

# NUMERIK
sns.countplot(all_data["MasVnrArea"])
all_data["MasVnrArea"] = all_data["MasVnrArea"].fillna(all_data["MasVnrArea"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["BsmtQual"])
all_data["BsmtQual"] = all_data["BsmtQual"].fillna(all_data["BsmtQual"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["BsmtCond"])
all_data["BsmtCond"] = all_data["BsmtCond"].fillna(all_data["BsmtCond"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["BsmtExposure"])
all_data["BsmtExposure"] = all_data["BsmtExposure"].fillna(all_data["BsmtExposure"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["BsmtFinType1"])
all_data["BsmtFinType1"] = all_data["BsmtFinType1"].fillna(all_data["BsmtFinType1"].mode()[0])

# NUMERIKAL
sns.countplot(all_data["BsmtFinSF1"])
all_data["BsmtFinSF1"] = all_data["BsmtFinSF1"].fillna(all_data["BsmtFinSF1"].mean())

# KATAGORIKAL
sns.countplot(all_data["BsmtFinType2"])
all_data["BsmtFinType2"] = all_data["BsmtFinType2"].fillna(all_data["BsmtFinType2"].mode()[0])

# NUMERIK
sns.countplot(all_data["BsmtFinSF2"])
all_data["BsmtFinSF2"] = all_data["BsmtFinSF2"].fillna(all_data["BsmtFinSF2"].mode()[0])

# NUMERIK
sns.countplot(all_data["BsmtUnfSF"])
all_data["BsmtUnfSF"] = all_data["BsmtUnfSF"].fillna(all_data["BsmtUnfSF"].mean())

# NUMERIK
sns.countplot(all_data["TotalBsmtSF"])
all_data["TotalBsmtSF"] = all_data["TotalBsmtSF"].fillna(all_data["TotalBsmtSF"].mean())

# KATEGORIKAL
sns.countplot(all_data["Electrical"])
all_data["Electrical"] = all_data["Electrical"].fillna(all_data["Electrical"].mode()[0])

# NUMERIKAL
sns.countplot(all_data["BsmtFullBath"])
all_data["BsmtFullBath"] = all_data["BsmtFullBath"].fillna(all_data["BsmtFullBath"].mode()[0])

# NUMERIKAL
sns.countplot(all_data["BsmtHalfBath"])
all_data["BsmtHalfBath"] = all_data["BsmtHalfBath"].fillna(all_data["BsmtHalfBath"].mode()[0])

# KATEGORIKAL
sns.countplot(all_data["KitchenQual"])
all_data["KitchenQual"] = all_data["KitchenQual"].fillna(all_data["KitchenQual"].mode()[0])

# KATEGORIKAL
sns.countplot(all_data["Functional"])
all_data["Functional"] = all_data["Functional"].fillna(all_data["Functional"].mode()[0])

# KATEGORIKAL
sns.countplot(all_data["GarageType"])
all_data["GarageType"] = all_data["GarageType"].fillna(all_data["GarageType"].mode()[0])

# NUMERIKAL
sns.countplot(all_data["GarageYrBlt"])
all_data["GarageYrBlt"] = all_data["GarageYrBlt"].fillna(all_data["GarageYrBlt"].median())

# KATEGORIKAL
sns.countplot(all_data["GarageFinish"])
all_data["GarageFinish"] = all_data["GarageFinish"].fillna(all_data["GarageFinish"].mode()[0])

# NUMERIKAL
sns.countplot(all_data["GarageCars"])
all_data["GarageCars"] = all_data["GarageCars"].fillna(all_data["GarageCars"].mode()[0])

# NUMERIKAL
sns.countplot(all_data["GarageArea"])
all_data["GarageArea"] = all_data["GarageArea"].fillna(all_data["GarageArea"].median())

# KATAGORIKAL
sns.countplot(all_data["GarageQual"])
all_data["GarageQual"] = all_data["GarageQual"].fillna(all_data["GarageQual"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["GarageCond"])
all_data["GarageCond"] = all_data["GarageCond"].fillna(all_data["GarageCond"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["SaleType"])
all_data["SaleType"] = all_data["SaleType"].fillna(all_data["SaleType"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["FireplaceQu"])
all_data["FireplaceQu"] = all_data["FireplaceQu"].fillna(all_data["FireplaceQu"].mode()[0])

# KATAGORIKAL
sns.countplot(all_data["MasVnrType"])
all_data["MasVnrType"] = all_data["MasVnrType"].fillna(all_data["MasVnrType"].mode()[0])

#CEK KEMBALI MISSING VALUE
data_missing = all_data.isnull().sum()[all_data.isnull().sum()>0]
data_missing

"""#### Catatan : HAPUS (PoolQC, Fence, MiscFeature, Alley)

---



HAPUS FITURE ITU KARENA, MISSING VALUE SANGAT BANYAK, ATAU BIARKAN SAJA NAMUM JANGAN GUNAKAN DALAM PEMODELAN
*teks yang dimiringkan*

### konvert beberapa feature kedalam bentuk string
dikarenakan ada beberapa nilai dari feature numerik yg sebenarnya bertipe katagorik
1. MSSubClass
2. OverallCond
3. OverallQual
4. YrSold
5. MoSold
"""

all_data.head()

all_data.info()

# convert data numerik menjadi katagorikal
all_data['MSSubClass'] = all_data['MSSubClass'].astype(str)
all_data['OverallCond'] = all_data['OverallCond'].astype(str)
all_data['OverallQual'] = all_data['OverallQual'].astype(str)
all_data['YrSold'] = all_data['YrSold'].astype(str)
all_data['MoSold'] = all_data['MoSold'].astype(str)

# Cek Kembali type data dari beberapa feature yg telah diubah
all_data.info()

"""### Menambahkan fiture baru

tambahkan fiture baru yang diangga penting dan memberikan dampak bagi model yaitu TotalSf = TotalBsmttSF + 1stFlrSF + 2ndFlrSF
"""

all_data["TotalSF"] = all_data["TotalBsmtSF"] + all_data["1stFlrSF"] + all_data["2ndFlrSF"]
all_data.shape

"""### Melebelkan data katagorik

lebelkan beberapa data categoric menjadi sebuah angka, agar dapat digunakan dalam pemodelan
"""

# daftar data numerik
data_numerik = all_data.dtypes[all_data.dtypes != "object"].index
data_numerik

# daftar data kategorik 
data_categoric = all_data.dtypes[all_data.dtypes == "object"].index
data_categoric

from sklearn.preprocessing import LabelEncoder
col_catagoric = ('FireplaceQu', 'BsmtQual', 'BsmtQual', 'GarageQual', 'GarageCond', 'ExterQual', 'ExterCond', 
                'PoolQC',  'HeatingQC', 'KitchenQual',  'BsmtFinType1', 'BsmtFinType2',  'Functional', 'Fence',
                'BsmtExposure', 'GarageFinish', 'LandSlope', 'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 
                'MSSubClass', 'OverallCond', 'MoSold', 'YrSold')

# melebelkan feature categorik 
for c in col_catagoric:
    lebel = LabelEncoder()
    lebel.fit(list(all_data[c].values))
    all_data[c] = lebel.transform(list(all_data[c].values))

# lihat ukuran all_data setelah dilebelkan
all_data.shape

all_data

"""### fiture skewness

1.  nilai skewness = 0 , artinya data berdistribusi normal dan kurvanya simetris
2. nilai skewness > 0 , artinya bobot data lebih besar di kaki kiri distribusinya dan kurvanya miring kekanan
3. nilai skewness < 0 ,  artinya bobot data lebih besar di kaki kanan distribusinya dan kurvanya miring kekiri
sehingga perlu dilakukan trsnsformasi data

  
Skewness atau disebut juga ukuran kemiringan yaitu suatu bilangan yang dapat menunjukanmiring atau tidaknya bentuk kurva suatu distribusi frekuensi. Skewness adalah derajatketidaksimetrisan suatu distribusi. Jika kurva frekuensi suatu distribusi memiliki ekor yang lebihmemanjang ke kanan (dilihat dari meannya) maka dikatakan menceng kanan (positif) dan jikasebaliknya maka menceng kiri (negatif).

### Catatan :
##### CARA MUDAH DALAM MENENTUKAN JENIS TRANSFORMASI DATA YAITU:
1.  DENGAN MELIHAT KURCA DISTRIBUSI DATANYA
2.  DENGAN MELIHAT NILAI MEAN DAN STANDAR DEVIASINYA
3.  DENGAN MELIHAT NILAI SKEW DAN KURTOSINYA
"""

from scipy.stats import norm, skew
# mendaftar feature numerik
numerik = all_data.dtypes[all_data.dtypes != "object"].index

# menampilkan nilai feature skewness
kaki_skew = all_data[numerik].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)
skewness = pd.DataFrame({'skew':kaki_skew})
skewness

"""#### Catatan 1 :
KARENA ADA BEBERAPA NILAI FEATURE NUMERIK YANG MEMILIKI SKEWNESS YANG TINGGI, ARTINYA DATA TERSEBUT TIDAK BERDISTRIBUSI NORMAL. SEHINGGA FITURE TERSEBUT HARUS DITRANSFORMASIKAN DENGAN METODE BOX COX.

#### catatan 2 :
DATA DIKATAKAN BERDISTRIBUSI NORMAL APABILA NILAO SKEWNESSNYA MENDEKATI 0, DATA TETAP DAPAT DIKATAKAN NORMAL APABILA NILAI SKEWNESSNYA BERADA DI ANTARA -0.5 SAMPAI 0.5

#### Catatan 3 :
saya akan mentransformasikan data yg memiliki nilai skewnes > 0.50 dan < -0.50
agar model yg dihasilkan lebih baik
"""

# jumlah data yg nilai skewnessnya > 0.50
skewness_positif = skewness[skewness.values > 0.50] 
len(skewness_positif)

# panggil data yg memiliki skewness > 0.50
skewness_positif

# jumlah data yg nilai skewnessnya < -0.50
skewness_negatif = skewness[skewness.values < -0.50] 
len(skewness_negatif)

# panggil skewness yg memiliki nilai < -0.50
skewness_negatif

"""#### Catatan :
terdapat 28 feature yang memiliki nilai skewness > 0.50 dan 17 feature yang memiliki nilai skewness < -0.50

## Koefisien Kurtosis
koefisien kurtosis adalah gambaran keruncingan kurva distribusi data, yakni derajat ketinggian puncak suatu distribusi frekuensi, biasanya diambil relatif terhadap distribusi normal. Nilai koefisien kurtosis yang baik adalah yang mendekati nol, semakin besar nilainya maka tingkat keruncingan kurvanya semakain tinggi.
"""

from scipy.stats import kurtosis

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari MiscVal : {}'.format( kurtosis(all_data["MiscVal"]) ))
print( 'Nilai skew dari MiscVal     : {}'.format( skew(all_data["MiscVal"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["MiscVal"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["MiscVal"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('MiscVal Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva MiscVal berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari PoolArea : {}'.format( kurtosis(all_data["PoolArea"]) ))
print( 'Nilai skew dari PoolArea     : {}'.format( skew(all_data["PoolArea"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["PoolArea"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["PoolArea"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('PoolArea Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva PoalArea berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari LotArea : {}'.format( kurtosis(all_data["LotArea"]) ))
print( 'Nilai skew dari LotArea     : {}'.format( skew(all_data["LotArea"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["LotArea"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["LotArea"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('LotArea Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva LootArea berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari LowQualFinSF : {}'.format( kurtosis(all_data["LowQualFinSF"]) ))
print( 'Nilai skew dari LowQualFinSF     : {}'.format( skew(all_data["LowQualFinSF"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["LowQualFinSF"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["LowQualFinSF"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('LowQualFinSF Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva LowQualFinSF berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari 3SsnPorch : {}'.format( kurtosis(all_data["3SsnPorch"]) ))
print( 'Nilai skew dari 3SsnPorch     : {}'.format( skew(all_data["3SsnPorch"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["3SsnPorch"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["3SsnPorch"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('3SsnPorch Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva 3SsnPorch berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari Alley : {}'.format( kurtosis(all_data["Alley"]) ))
print( 'Nilai skew dari Alley     : {}'.format( skew(all_data["Alley"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["Alley"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["Alley"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('Alley Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva Alley berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari LandSlope : {}'.format( kurtosis(all_data["LandSlope"]) ))
print( 'Nilai skew dari LandSlope     : {}'.format( skew(all_data["LandSlope"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["LandSlope"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["LandSlope"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('LandSlope Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva LandSlope berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari KitchenAbvGr : {}'.format( kurtosis(all_data["KitchenAbvGr"]) ))
print( 'Nilai skew dari KitchenAbvGr     : {}'.format( skew(all_data["KitchenAbvGr"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["KitchenAbvGr"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["KitchenAbvGr"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('KitchenAbvGr Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva KitchenAbvGr berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari BsmtFinSF2 : {}'.format( kurtosis(all_data["BsmtFinSF2"]) ))
print( 'Nilai skew dari BsmtFinSF2     : {}'.format( skew(all_data["BsmtFinSF2"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["BsmtFinSF2"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["BsmtFinSF2"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('BsmtFinSF2 Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva BsmtFinSF2 berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari EnclosedPorch : {}'.format( kurtosis(all_data["EnclosedPorch"]) ))
print( 'Nilai skew dari EnclosedPorch     : {}'.format( skew(all_data["EnclosedPorch"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["EnclosedPorch"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["EnclosedPorch"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('EnclosedPorch Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva EnclosedPorch berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari ScreenPorch : {}'.format( kurtosis(all_data["ScreenPorch"]) ))
print( 'Nilai skew dari ScreenPorch     : {}'.format( skew(all_data["ScreenPorch"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["ScreenPorch"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["ScreenPorch"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('ScreenPorch Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva ScreenPorch berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari BsmtHalfBath : {}'.format( kurtosis(all_data["BsmtHalfBath"]) ))
print( 'Nilai skew dari BsmtHalfBath     : {}'.format( skew(all_data["BsmtHalfBath"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["BsmtHalfBath"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["BsmtHalfBath"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('BsmtHalfBath Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva BsmtHalfBath  berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari MasVnrArea : {}'.format( kurtosis(all_data["MasVnrArea"]) ))
print( 'Nilai skew dari MasVnrArea     : {}'.format( skew(all_data["MasVnrArea"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["MasVnrArea"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["MasVnrArea"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('MasVnrArea Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva MasVnrArea berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari OpenPorchSF : {}'.format( kurtosis(all_data["OpenPorchSF"]) ))
print( 'Nilai skew dari OpenPorchSF     : {}'.format( skew(all_data["OpenPorchSF"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["OpenPorchSF"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["OpenPorchSF"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('OpenPorchSF Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva OpenPorchSF berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari WoodDeckSF : {}'.format( kurtosis(all_data["WoodDeckSF"]) ))
print( 'Nilai skew dari WoodDeckSF     : {}'.format( skew(all_data["WoodDeckSF"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["WoodDeckSF"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["WoodDeckSF"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('WoodDeckSF Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva WoodDeckSF berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari LotFrontage : {}'.format( kurtosis(all_data["LotFrontage"]) ))
print( 'Nilai skew dari LotFrontage     : {}'.format( skew(all_data["LotFrontage"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["LotFrontage"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["LotFrontage"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('LotFrontage Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva LotFrontage berbentuk Substansial Positif Skewness



"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari TotalSF : {}'.format( kurtosis(all_data["TotalSF"]) ))
print( 'Nilai skew dari TotalSF     : {}'.format( skew(all_data["TotalSF"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["TotalSF"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["TotalSF"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('TotalSF Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva TotalSF berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari 1stFlrSF : {}'.format( kurtosis(all_data["1stFlrSF"]) ))
print( 'Nilai skew dari 1stFlrSF     : {}'.format( skew(all_data["1stFlrSF"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["1stFlrSF"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["1stFlrSF"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('1stFlrSF Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva 1stFlrSF berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari BsmtFinSF1 : {}'.format( kurtosis(all_data["BsmtFinSF1"]) ))
print( 'Nilai skew dari BsmtFinSF1     : {}'.format( skew(all_data["BsmtFinSF1"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["BsmtFinSF1"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["BsmtFinSF1"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('BsmtFinSF1 Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva BsmtFinSF1  berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari GrLivArea : {}'.format( kurtosis(all_data["GrLivArea"]) ))
print( 'Nilai skew dari GrLivArea     : {}'.format( skew(all_data["GrLivArea"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["GrLivArea"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["GrLivArea"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('GrLivArea Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva GrLivArea berbentuk moderate Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari TotalBsmtSF : {}'.format( kurtosis(all_data["TotalBsmtSF"]) ))
print( 'Nilai skew dari TotalBsmtSF     : {}'.format( skew(all_data["TotalBsmtSF"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["TotalBsmtSF"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["TotalBsmtSF"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('TotalBsmtSF Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva TotalBsmtSF berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari BsmtUnfSF : {}'.format( kurtosis(all_data["BsmtUnfSF"]) ))
print( 'Nilai skew dari BsmtUnfSF     : {}'.format( skew(all_data["BsmtUnfSF"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["BsmtUnfSF"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["BsmtUnfSF"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('BsmtUnfSF Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva BsmtUnfSF berbentuk Moderate Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari FireplaceQu : {}'.format( kurtosis(all_data["FireplaceQu"]) ))
print( 'Nilai skew dari FireplaceQu     : {}'.format( skew(all_data["FireplaceQu"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["FireplaceQu"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["FireplaceQu"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('FireplaceQu Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva FireplaceQu berbentuk Substansian Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari 2ndFlrSF : {}'.format( kurtosis(all_data["2ndFlrSF"]) ))
print( 'Nilai skew dari 2ndFlrSF     : {}'.format( skew(all_data["2ndFlrSF"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["2ndFlrSF"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["2ndFlrSF"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('2ndFlrSF Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva 2ndFlrSF  berbentuk Substansian Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari TotRmsAbvGrd : {}'.format( kurtosis(all_data["TotRmsAbvGrd"]) ))
print( 'Nilai skew dari TotRmsAbvGrd     : {}'.format( skew(all_data["TotRmsAbvGrd"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["TotRmsAbvGrd"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["TotRmsAbvGrd"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('TotRmsAbvGrd Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva TotRmsAbvGrd  berbentuk Moderate Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari Fireplaces : {}'.format( kurtosis(all_data["Fireplaces"]) ))
print( 'Nilai skew dari Fireplaces     : {}'.format( skew(all_data["Fireplaces"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["Fireplaces"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["Fireplaces"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('Fireplaces Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva Fireplaces berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari HalfBath : {}'.format( kurtosis(all_data["HalfBath"]) ))
print( 'Nilai skew dari HalfBath     : {}'.format( skew(all_data["HalfBath"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["HalfBath"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["HalfBath"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('HalfBath Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva HalfBath berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari BsmtFullBath : {}'.format( kurtosis(all_data["BsmtFullBath"]) ))
print( 'Nilai skew dari BsmtFullBath     : {}'.format( skew(all_data["BsmtFullBath"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["BsmtFullBath"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["BsmtFullBath"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('BsmtFullBath Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva BsmtFullBath berbentuk Substansial Positif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari OverallCond : {}'.format( kurtosis(all_data["OverallCond"]) ))
print( 'Nilai skew dari OverallCond     : {}'.format( skew(all_data["OverallCond"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["OverallCond"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["OverallCond"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('OverallCond Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva TotRmsAbvGrd berbentuk moderate Positif Skewness"""

# panggil skewness bernilai negatif
skewness_negatif

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari YearBuilt	 : {}'.format( kurtosis(all_data["YearBuilt"]) ))
print( 'Nilai skew dari YearBuilt	     : {}'.format( skew(all_data["YearBuilt"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["YearBuilt"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["YearBuilt"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('YearBuilt Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva YearBuilt berbentuk Moderate Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari LotShape	 : {}'.format( kurtosis(all_data["LotShape"]) ))
print( 'Nilai skew dari LotShape	     : {}'.format( skew(all_data["LotShape"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["LotShape"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["LotShape"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('LotShape Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva LotShape berbentuk Moderate Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari MoSold	 : {}'.format( kurtosis(all_data["MoSold"]) ))
print( 'Nilai skew dari MoSold	     : {}'.format( skew(all_data["MoSold"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["MoSold"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["MoSold"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('MoSold Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva MoSold berbentuk Moderate Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari BsmtExposure	 : {}'.format( kurtosis(all_data["BsmtExposure"]) ))
print( 'Nilai skew dari BsmtExposure	     : {}'.format( skew(all_data["BsmtExposure"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["BsmtExposure"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["BsmtExposure"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('BsmtExposure Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva TotRmsAbvGrd berbentuk Substansian Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari BsmtQual	 : {}'.format( kurtosis(all_data["BsmtQual"]) ))
print( 'Nilai skew dari BsmtQual	     : {}'.format( skew(all_data["BsmtQual"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["BsmtQual"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["BsmtQual"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('BsmtQual Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva BsmtQual berbentuk Substansian Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari KitchenQual	  : {}'.format( kurtosis(all_data["KitchenQual"]) ))
print( 'Nilai skew dari KitchenQual	     : {}'.format( skew(all_data["KitchenQual"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["KitchenQual"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["KitchenQual"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('KitchenQual Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva KitchenQual berbentuk Substansian Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari ExterQual	  : {}'.format( kurtosis(all_data["ExterQual"]) ))
print( 'Nilai skew dari ExterQual	     : {}'.format( skew(all_data["ExterQual"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["ExterQual"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["ExterQual"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('ExterQual Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva ExterQual berbentuk Substansian Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari Fence	  : {}'.format( kurtosis(all_data["Fence"]) ))
print( 'Nilai skew dari Fence	     : {}'.format( skew(all_data["Fence"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["Fence"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["Fence"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('Fence Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva Fence berbentuk Moderate Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari ExterCond	: {}'.format( kurtosis(all_data["ExterCond"]) ))
print( 'Nilai skew dari ExterCond	     : {}'.format( skew(all_data["ExterCond"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["ExterCond"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["ExterCond"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('ExterCond Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva ExterCond berbentuk Substansial Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari PavedDrive 	: {}'.format( kurtosis(all_data["PavedDrive"]) ))
print( 'Nilai skew dari PavedDrive	     : {}'.format( skew(all_data["PavedDrive"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["PavedDrive"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["PavedDrive"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('PavedDrive Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva PavedDrive berbentuk Substansial Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari BsmtFinType2 	: {}'.format( kurtosis(all_data["BsmtFinType2"]) ))
print( 'Nilai skew dari BsmtFinType2	     : {}'.format( skew(all_data["BsmtFinType2"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["BsmtFinType2"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["BsmtFinType2"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('BsmtFinType2 Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva BsmtFinType2 berbentuk Substansial Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari CentralAir 	: {}'.format( kurtosis(all_data["CentralAir"]) ))
print( 'Nilai skew dari CentralAir	     : {}'.format( skew(all_data["CentralAir"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["CentralAir"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["CentralAir"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('CentralAir Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva CentralAir berbentuk Substansial Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari Functional 	: {}'.format( kurtosis(all_data["Functional"]) ))
print( 'Nilai skew dari Functional	     : {}'.format( skew(all_data["Functional"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["Functional"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["Functional"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('Functional Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva Functional berbentuk Substansial Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari GarageQual 	: {}'.format( kurtosis(all_data["GarageQual"]) ))
print( 'Nilai skew dari GarageQual	     : {}'.format( skew(all_data["GarageQual"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["GarageQual"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["GarageQual"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('GarageQual Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva GarageQual berbentuk Substansial Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari GarageCond 	: {}'.format( kurtosis(all_data["GarageCond"]) ))
print( 'Nilai skew dari GarageCond	     : {}'.format( skew(all_data["GarageCond"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["GarageCond"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["GarageCond"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('GarageCond Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva GarageCond berbentuk Substansial Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari Street 	: {}'.format( kurtosis(all_data["Street"]) ))
print( 'Nilai skew dari Street	    : {}'.format( skew(all_data["Street"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["Street"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["Street"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('Street Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva Street berbentuk Substansial Negatif Skewness"""

# nilai kurtosis dan skew untuk melihat kecondongan kurva distribusi
print( 'Nilai kurtosis dari PoolQC 	: {}'.format( kurtosis(all_data["PoolQC"]) ))
print( 'Nilai skew dari PoolQC	    : {}'.format( skew(all_data["PoolQC"]) ))

# bandingkan bentuk distribusi dari SalePrice dengan kurva distribusi normal yang baik
(mu, sigma) = norm.fit(all_data["PoolQC"])
print("\n mu = {:.5f} and sigma = {:.5f}\n". format(mu, sigma))

plt.legend(["Normal Distribution. ($\mu_$ {:.5f}) and $\sigma_$ {:.5f}". format (mu, sigma)], loc ='best')
sns.distplot(all_data["PoolQC"], fit=norm)
plt.ylabel('Frequency')
plt.xlabel('PoolQC Distribution')
plt.show()

"""Dapat disimpulkan bahwa kurva PoolQC berbentuk Substansial Negatif Skewness

## Transform feature skewness

#### transform feature numerik skew
"""

all_data

skewness = skewness[abs(skewness) > 0.50]
print("jumlah feature skewness yang harus ditransformasi yaitu : ", skewness.shape[0])

numerik = all_data.dtypes[all_data.dtypes != "object"].index
print("Jumlah data numerik yang harus ditranspose yaitu : ", len(numerik))

"""#### Catatan :
Jika didalam variabel bebas (feature) terdapat satu variabel numerik yang harus di transpose, maka seluruh variabel numeriknya harus di transpose juga.

## Tranpose Data
Semua data numerik akan ditransposekan menggunakan metode BoxCox, dimana akan digunakan lamda=0.15 dan model akan ditransformasikan kedalam bentuk log(x+1) atau dalam metode BoxCox sama dengan boxcox1p.
"""

# transformasi BoxCox
from scipy.special import boxcox1p
skewed_feature = skewness.index
lamda = 0.15
for feat in skewed_feature:
    all_data[feat] = boxcox1p(all_data[feat], lamda)

# recek data yg telah ditranspose
all_data.head()

"""#### Hapus feauture missing value terbanyak 
'Alley', 'PoolQC', 'Fence', 'MiscFeature' dan Id

"""

# hapus featur yang memiliki missing value sangat banyak yaitu Alley, PoolQC, Fence dan MiscFeature
all_data.drop(['Id', 'Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)

"""### Ubah Variabel Kategorikal Menjadi Variabel Numerikal
mengubah variabel kategorikal menjadi variabel numerikal dengan melakukan proses One-Hot-Encode terhadap variabel kategorikal. Bagi kamu yang belum tahu apa itu One-Hot-Encode, One-Hot-Encode adalah proses untuk membuat kolom baru dari variabel kategorikal kita di mana setiap kategori menjadi kolom baru dengan nilai 0 atau 1 (0 mewakili tidak ada dan 1 mewakili ada).
"""

# mengconvert data kategorik menjadi numerik menggunakan get_dummies
all_data = pd.get_dummies(all_data)
print(all_data.shape)

# recek apakah masih terdapat data kategorik
all_data

"""#### Split Data
bagi all_data menjadi data train dan test
"""

# membagi all_data menjadi data train dan test
train = all_data[:ntrain]
test = all_data[ntrain:]
print(len(train))
print(len(test))

# tampilkan data train
train

# tampilkan data test
test

# informasi tentang train
train.info()

# informasi tentang test
test.info()

# ukuran train
train.shape

# ukran test
test.shape

"""# MODELING"""

# import fungsi yang diperlukan
from sklearn.linear_model import ElasticNet, Lasso, BayesianRidge, LassoLarsIC
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.kernel_ridge import KernelRidge
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import RobustScaler
from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone
from sklearn.model_selection import KFold, cross_val_score, train_test_split
from sklearn.metrics import mean_squared_error
import xgboost as xgb
import lightgbm as lgb
from sklearn.model_selection import GridSearchCV
import sklearn.metrics as metrics

"""### Cross Validation
Evaluasi kinerja monel dengan menggunakan cross validation
"""

# fungsi validasi dengan menggunakan n_folds = 5
n_folds = 5

def rmsle_cv(model):
  kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)
  rmse = np.sqrt(-cross_val_score(model, train.values, y_train, scoring="neg_mean_squared_error", cv = kf))
  
  return(rmse)

"""### Model Regresi
Buat prediksi dasar dengan menggunakan beberapa jenis model
"""

# LASSO
lasso = make_pipeline(RobustScaler(), Lasso(alpha=0.0005, random_state=1))

# Elastic Net
ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=0.9, random_state=3))

# Kernel Ridge
KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)

# Gradient Boosting
GBoost =GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt', 
                                  min_samples_leaf=15, min_samples_split=10,
                                  loss='huber', random_state=5)

# XGBoost
model_xgb = xgb.XGBRFRegressor(colsample_bytree=0.4603, gamma=0.0468, learning_rate=0.05,
                               max_depth=3, min_child_weight=1.7817, n_estimators=22000, 
                               reg_alpha=0.4640, reg_lambda=0.8571, subsample=0.5213,
                               silent=1, random_state=7, nthread=-1)

# LightGBM
model_lgb = lgb.LGBMRegressor(objective='regression', num_leaves=5, learning_rate=0.05, n_estimators=720,
                              max_bin= 55, bagging_fraction=0.8, bagging_freq=5, feature_fraction=0.2319,
                              fearture_fraction_seed=9, bagging_seed=9,
                              min_data_in_leaf=6, min_sum_hessian_in_leaf=11)

"""### Evaluasi model dengan menggunakan cross validation RMSLE Error
Evaluasi model yang dihasilkan dengan melihat rmsle nya
"""

# Score LASSO
score1 = rmsle_cv(lasso)
print("LASSO Score mean: {:.4f} Score Std: {:.4f}\n ".format(score1.mean(), score1.std()))

#Score ENet
score2 = rmsle_cv(ENet)
print("ENet Score mean: {:.4f} Score Std: {:.4f}\n ".format(score2.mean(), score2.std()))

#Score ENet
score3 = rmsle_cv(KRR)
print("KRR Score mean: {:.4f} Score Std: {:.4f}\n ".format(score3.mean(), score3.std()))

#Score GBoost
score4 = rmsle_cv(GBoost)
print("GBoost Score mean: {:.4f} Score Std: {:.4f}\n ".format(score4.mean(), score4.std()))

#Score XGBoost
score5 = rmsle_cv(model_xgb)
print("XGBoost Score mean: {:.4f} Score Std: {:.4f}\n ".format(score5.mean(), score5.std()))

#Score LightGBoost
score6 = rmsle_cv(model_lgb)
print("Light GBOOST Score mean: {:.4f} Score Std: {:.4f}\n ".format(score6.mean(), score6.std()))

"""Kelas untuk mendefinisikan rata-rata score dari setiap model"""

# fungsi untuk menghitung rata-rata score hasil evaluasi model
class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):
  def  __init__(self, models):
    self.models = models

  # kloning model setiap model asli untuk di pasangkan / gunakan ke data
  def fit(self, X, y):
    self.models_ = [clone(x) for x in self.models]

    # training model yang telah dikloning
    for model in self.models_:
      model.fit(X, y)
    return self

  # lakukan prediksi rata-rata dari model yang telah dikloning
  def predict(self, X):
      predictions = np.column_stack([model.predict(X) for model in self.models_])
      return np.mean(predictions, axis=1)

# melihat score rata-rata dari seluruh model lasso, ENet, KRR, GBoost, model_xgb, model_lgb
averaged_models = AveragingModels(models = (lasso, ENet, KRR, GBoost, model_xgb, model_lgb))

# nilai scrore rata-rata dari keseluruhan model 
skor = rmsle_cv(averaged_models)
print("Score mean seluruh model: {:.4f} Score Std selutuh model: {:.4f}\n ".format(skor.mean(), skor.std()))

# fungsi stacking model untuk melatih meta model dengan n_folds = 5
class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):
  def __init__(self, base_models, meta_model, n_folds=5):
    self.base_models = base_models
    self.meta_model = meta_model
    self.n_folds = n_folds

  # fungsi untuk memasangkan data pada model kloning
  def fit(self, X, y):
    self.base_models_ = [list() for x in self.base_models]
    self.meta_model_ = clone(self.meta_model)
    kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)

    # training model kloning untuk menghasilkan prediksi out_of fold 
    out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))
    for i, model in enumerate(self.base_models):
      for train_index, holdout_index in kfold.split(X, y):

        # training meta model
        instance = clone(model)
        self.base_models_[i].append(instance)
        instance.fit(X[train_index], y[train_index])
        y_pred = instance.predict(X[holdout_index])
        out_of_fold_predictions[holdout_index, i]= y_pred

    # training mmeta model yang telah dikloning dengan menggunakan prediksi out_of_fold
    self.meta_model_.fit(out_of_fold_predictions, y)
    return self
  
  def predict(self, X):
    meta_features = np.column_stack([
                  np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)
                  for base_models in self.base_models_])
    return self.meta_model_.predict(meta_features)

# rata-rata skore stack model dari model asli Enet, GBoost, dan KRR dengan menggunakan meta model lasso
stack_averaged_model = StackingAveragedModels(base_models = (ENet, GBoost, KRR), meta_model=lasso)

# panggil fungsi rmsle untuk menghitung rata-rata score stack model
score = rmsle_cv(stack_averaged_model)
print("score rata-rata model  : {:.4f} dan std : {:.4}".format(score.mean(), score.std()))

"""### Ensembling
menggunakan metode ensebling untuk meningkatkan pencapaian solusi prediksi yang lebih baik daripada algoritma yang bisa dan meningkatkan perfoma model
"""

# hitung rmsle model 
def rmsle(y, y_pred):
  return np.sqrt(mean_squared_error(y, y_pred))

"""#### Stacked Model"""

stack_averaged_model.fit(train.values, y_train)
stack_train_prediction = stack_averaged_model.predict(train.values)
stacked_pred = np.expm1(stack_averaged_model.predict(test.values))
print(rmsle(y_train, stack_train_prediction))

"""### XGBoost Model"""

model_xgb.fit(train.values, y_train)
xgb_train_prediction = model_xgb.predict(train.values)
xgb_pred = np.expm1(model_xgb.predict(test.values))
print(rmsle(y_train, xgb_train_prediction))

"""### Model LightGBM"""

model_lgb.fit(train.values, y_train)
lgb_train_prediction = model_lgb.predict(train.values)
lgb_pred = np.expm1(model_lgb.predict(test.values))
print(rmsle(y_train, lgb_train_prediction))

"""#### Nilai rmse data train"""

# nilai rmsle dari model ensamble
print(rmsle(y_train, stack_train_prediction*0.70+xgb_train_prediction*0.15+lgb_train_prediction*0.15))

"""#### Prediksi Ensamble"""

# model ensamble
ensemble = stacked_pred*0.70+xgb_pred*0.15+lgb_pred*0.15

"""#### Submission"""

# buat data frame baru yang berisi Id dan SalePrice
my_submit = pd.DataFrame()
my_submit['Id'] = test_id
my_submit['SalePrice'] = ensemble

# tampilkan data my_submit
my_submit

# ukuran data my_submit
my_submit.shape

# simpan data my_submit 
my_submit.to_csv("Submission.csv")